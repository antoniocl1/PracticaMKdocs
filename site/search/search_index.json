{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"about/","title":"Acerca de","text":"<p>hola</p>"},{"location":"practica1/","title":"Practica 1","text":"<p>Sitio de Antonio</p>"},{"location":"practica4-1/","title":"Practica-4.1","text":"<p>2\u00ba ASIR</p>"},{"location":"practica4-1/#1191-ejercicio-1","title":"1.19.1 Ejercicio 1","text":""},{"location":"practica4-1/#crea-un-grupo-de-seguridad-para-las-maquinas-del-backend-con-el-nombre-backend-sg","title":"Crea un grupo de seguridad para las m\u00e1quinas del Backend con el nombre backend-sg.","text":""},{"location":"practica4-1/#anada-las-siguientes-reglas-al-grupo-de-seguridad","title":"A\u00f1ada las siguientes reglas al grupo de seguridad:","text":"<ul> <li>Acceso SSH (puerto 22/TCP) desde cualquier direcci\u00f3n IP.</li> <li>Acceso al puerto 3306/TCP desde cualquier direcci\u00f3n IP.  </li> </ul>"},{"location":"practica4-1/#1192-ejercicio-2","title":"1.19.2 Ejercicio 2","text":""},{"location":"practica4-1/#crea-una-instancia-ec2-para-la-maquina-del-backend-con-las-siguientes-caracteristicas","title":"Crea una instancia EC2 para la m\u00e1quina del Backend con las siguientes caracter\u00edsticas.","text":"<ul> <li>Identificador de la AMI: ami-08e637cea2f053dfa. Esta AMI se corresponde con la imagen Red Hat Enterprise Linux 9 (HVM).</li> <li>N\u00famero de instancias: 1</li> <li>Tipo de instancia: t2.micro</li> <li>Clave privada: vockey</li> <li>Grupo de seguridad: backend-sg</li> <li>Nombre de la instancia: backend </li> </ul>"},{"location":"practica4-1/#1193-ejercicio-3","title":"1.19.3 Ejercicio 3","text":""},{"location":"practica4-1/#crear-un-script-para-crear-la-infraestructura-de-la-practica-propuesta-por-el-profesor","title":"Crear un script para crear la infraestructura de la pr\u00e1ctica propuesta por el profesor.","text":"<p> (Compruebo con el ejercicio 5 que se han creado)</p>"},{"location":"practica4-1/#crear-un-script-para-eliminar-la-infraestructura-de-la-practica-propuesta-por-el-profesor","title":"Crear un script para eliminar la infraestructura de la pr\u00e1ctica propuesta por el profesor.","text":"<p> (La que no me est\u00e1 dejando eliminar es el grupo de seguridad Default \"en principio es algo normal\")</p>"},{"location":"practica4-1/#1194-ejercicio-4","title":"1.19.4 Ejercicio 4","text":""},{"location":"practica4-1/#modifique-los-scripts-del-repositorio-de-ejemplo","title":"Modifique los scripts del repositorio de ejemplo:","text":""},{"location":"practica4-1/#httpsgithubcomjosejuansanchezpractica-aws-cli","title":"https://github.com/josejuansanchez/practica-aws-cli","text":""},{"location":"practica4-1/#1195-ejercicio-5","title":"1.19.5 Ejercicio 5","text":""},{"location":"practica4-1/#escriba-un-script-de-bash-que-muestre-el-nombre-de-todas-instancias-ec2-que-tiene-en-ejecucion-junto-a-su-direccion-ip-publica","title":"Escriba un script de bash que muestre el nombre de todas instancias EC2 que tiene en ejecuci\u00f3n junto a su direcci\u00f3n IP p\u00fablica.","text":""},{"location":"practica4-1/#1196-ejercicio-6","title":"1.19.6 Ejercicio 6","text":""},{"location":"practica4-1/#modifique-los-scripts-del-repositorio-de-ejemplo_1","title":"Modifique los scripts del repositorio de ejemplo:","text":""},{"location":"practica4-1/#httpsgithubcomjosejuansanchezpractica-aws-cli_1","title":"https://github.com/josejuansanchez/practica-aws-cli","text":"<p>He tomado el trabajo realizado en el ejercicio 3 y lo he dividido en distintos scripts, siguiendo la estructura del repositorio de referencia.</p>"},{"location":"practica4-3/","title":"Practica4.3","text":"<p>IAW 2\u00ba ASIR</p>"},{"location":"practica4-3/#ejercicio1","title":"Ejercicio1","text":"<pre><code>from common import aws_resource_functions as aws\n\n# Hacer las reglas de entrada del grupo de seguridad\ningress_permissions = [\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': 22, 'ToPort': 22},\n    {'CidrIp': '0.0.0.0/0', 'IpProtocol': 'tcp', 'FromPort': 3306, 'ToPort': 3306}\n]\n\n# Definir el nombre y la descripci\u00f3n del grupo de seguridad\nsg_name = 'backend-sg'\nsg_description = 'SG para el backend'\n\n# Crear el grupo de seguridad\naws.create_security_group(sg_name, sg_description, ingress_permissions)\n\n# Listar los grupos de seguridad\naws.list_security_groups()\n</code></pre>"},{"location":"practica4-3/#ejercicio2","title":"Ejercicio2","text":"<pre><code>from common import aws_resource_functions as aws\n\n# AMI ID\nami = 'ami-08e637cea2f053dfa'\n\n# Instance type\ninstance_type = 't2.micro'\n\n# SSH key name\nkey_name = 'vockey'\n\n# Instance name and security group name\ninstance_name = 'backend'\nsg_name = 'backend-sg'\n\n# Verificar si el grupo de seguridad existe\nif aws.security_group_exists(sg_name) == False:\n    print('El grupo de seguridad no existe')\n    exit()\n\n# Crear la instancia\naws.create_instance(ami, 1, instance_type, key_name, instance_name, sg_name)\n\n# Listar las instancias\naws.list_instances()\n</code></pre>"},{"location":"practica4-3/#ejercicio3a","title":"Ejercicio3A","text":"<pre><code>from common import aws_resource_functions as aws\nimport boto3\nimport time\n\n# AMI ID\nami = 'ami-04b4f1a9cf54c11d0'\n\n# Tipo de instancia\ninstance_type = 't2.micro'\n\n# Nombre de la clave SSH\nkey_name = 'vockey'\n\n# Nombres de las instancias y grupos de seguridad\nnombres_instancias = ['frontend-1', 'frontend-2', 'backend', 'balanceador', 'nfs']\nnombres_sg = ['frontend-sg', 'frontend-sg', 'backend-sg', 'balanceador-sg', 'nfs-sg']\n\n# Reglas de los grupos de seguridad para las instancias..\nreglas_sg = {\n    'frontend-sg': [\n        {'IpProtocol': 'tcp', 'FromPort': 22, 'ToPort': 22, 'CidrIp': '0.0.0.0/0'},\n        {'IpProtocol': 'tcp', 'FromPort': 2049, 'ToPort': 2049, 'CidrIp': '0.0.0.0/0'},\n        {'IpProtocol': 'tcp', 'FromPort': 80, 'ToPort': 80, 'CidrIp': '0.0.0.0/0'},\n        {'IpProtocol': 'tcp', 'FromPort': 443, 'ToPort': 443, 'CidrIp': '0.0.0.0/0'},\n        {'IpProtocol': 'tcp', 'FromPort': 3306, 'ToPort': 3306, 'CidrIp': '0.0.0.0/0'}\n    ],\n    'backend-sg': [\n        {'IpProtocol': 'tcp', 'FromPort': 22, 'ToPort': 22, 'CidrIp': '0.0.0.0/0'},\n        {'IpProtocol': 'tcp', 'FromPort': 3306, 'ToPort': 3306, 'CidrIp': '0.0.0.0/0'}\n    ],\n    'balanceador-sg': [\n        {'IpProtocol': 'tcp', 'FromPort': 22, 'ToPort': 22, 'CidrIp': '0.0.0.0/0'},\n        {'IpProtocol': 'tcp', 'FromPort': 3306, 'ToPort': 3306, 'CidrIp': '0.0.0.0/0'},\n        {'IpProtocol': 'tcp', 'FromPort': 80, 'ToPort': 80, 'CidrIp': '0.0.0.0/0'},\n        {'IpProtocol': 'tcp', 'FromPort': 443, 'ToPort': 443, 'CidrIp': '0.0.0.0/0'},\n        {'IpProtocol': 'tcp', 'FromPort': 2049, 'ToPort': 2049, 'CidrIp': '0.0.0.0/0'}\n    ],\n    'nfs-sg': [\n        {'IpProtocol': 'tcp', 'FromPort': 22, 'ToPort': 22, 'CidrIp': '0.0.0.0/0'},\n        {'IpProtocol': 'tcp', 'FromPort': 2049, 'ToPort': 2049, 'CidrIp': '0.0.0.0/0'}\n    ]\n}\n\n# Crear los grupos de seguridad si no existen ya.\nfor nombre_sg, reglas in reglas_sg.items():\n    if not aws.security_group_exists(nombre_sg):\n        aws.create_security_group(nombre_sg, f'Reglas para {nombre_sg}', reglas)\n\n# Crear las IPs el\u00e1sticas.\nips_elasticas = {}\nfor nombre_instancia in nombres_instancias:\n    ip_elastica = aws.allocate_elastic_ip()\n    ips_elasticas[nombre_instancia] = ip_elastica\n\n# Crear las instancias y asociar las IPs el\u00e1sticas a las instancias creadas. \nfor nombre_instancia, nombre_sg in zip(nombres_instancias, nombres_sg):\n    aws.create_instance(ami, 1, instance_type, key_name, nombre_instancia, nombre_sg)\n    id_instancia = aws.get_instance_id(nombre_instancia)\n\n    # Esperar hasta que la instancia est\u00e9 en estado 'running' para asociar la IP el\u00e1stica.\n    ec2 = boto3.resource('ec2')\n    instance = ec2.Instance(id_instancia)\n    instance.wait_until_running()\n\n    # Asociar la IP el\u00e1stica a la instancia.\n    aws.associate_elastic_ip(ips_elasticas[nombre_instancia], id_instancia)\n</code></pre>"},{"location":"practica4-3/#ejercicio3b","title":"Ejercicio3B","text":"<pre><code>from common.aws_resource_class import AWS\n\n# Creamos el objeto AWS\naws = AWS()\n\n#Variables instancias\ninstance_name = [\"frontend-1\", \n                 \"frontend-2\", \n                 \"balanceador\", \n                 \"backend\", \n                 \"nfs\"]\n\n# Eliminar IPs\ndef delete_IP(instance_name):\n    try:\n        instance_id = aws.get_instance_id(instance_name)\n        elastic_ip = aws.get_instance_public_ip(instance_id)\n        aws.release_elastic_ip(elastic_ip)\n    except:\n        print(\"No se ha encontrado una IP para borrar\")\n\nfor i in range(len(instance_name)):\n    delete_IP(instance_name[i])\n\n# Eliminar instancias\ndef delete_instances(instance_name):\n    aws.terminate_instance(instance_name)\n\nfor i in range(len(instance_name)):\n    delete_instances(instance_name[i])\n\n#Variables grupos de seguridad\nsg_name = [\"frontend-sg\", \n           \"backend-sg\", \n           \"balanceador-sg\", \n           \"nfs-sg\"]\n\n# Eliminar grupos de seguridad\ndef delete_sg(sg_name):\n    aws.delete_security_group(sg_name)\n\nfor i in range(len(sg_name)):\n    delete_sg(sg_name[i])\n</code></pre> <p> El error que nos da pasa despu\u00e9s de ejecutar muchas veces el script, supongo que al AWS le cuesta procesar todas las creaciones y borrados que estoy haciendo y se queda un poco pillado</p>"},{"location":"practica4-5/","title":"Practica-4.5 - Terraform","text":""},{"location":"practica4-5/#ejercicio-para-crear-la-infraestructura-de-la-practica-111-con-un-script-de-terraform","title":"Ejercicio para crear la infraestructura de la Pr\u00e1ctica 1.11 con un script de Terraform","text":""},{"location":"practica4-5/#comprobaciones-previas","title":"Comprobaciones previas","text":"<ul> <li>1. Configurar correctamente las credenciales de AWS en C:/Users/antonio/.aws/credentials.</li> <li>2. Ejecutar <code>terraform init</code> para inicializar el proyecto con Terraform.</li> <li>3. Ejecutar <code>terraform plan</code> para ver el plan de ejecuci\u00f3n y confirmar que no hay errores.</li> <li>4. Ejecutar <code>terraform apply</code> para crear la infraestructura.</li> </ul> <p>Archivo \"main.tf\" (Informaci\u00f3n relevante comentada en el c\u00f3digo)\"</p> <pre><code>provider \"aws\" {\n  region = var.region\n}\n\n# Definimos el grupo de seguridad para las instancias frontend, permitiendo reglas espec\u00edficas de acceso.\nresource \"aws_security_group\" \"frontend\" {\n  name        = var.SG_FRONTEND\n  description = \"SG Frontend\"\n}\n\n# Especificamos las reglas de entrada para el grupo de seguridad del frontend, \n# permitiendo tr\u00e1fico en los puertos SSH (22), NFS (2049), HTTP (80), HTTPS (443) y MySQL (3306) desde cualquier direcci\u00f3n IP.\nresource \"aws_security_group_rule\" \"frontend_ingress\" {\n  count             = 5\n  security_group_id = aws_security_group.frontend.id\n  type              = \"ingress\"\n  from_port         = [22, 2049, 80, 443, 3306][count.index]\n  to_port           = [22, 2049, 80, 443, 3306][count.index]\n  protocol          = \"tcp\"\n  cidr_blocks       = [\"0.0.0.0/0\"]\n}\n\n# Definimos el grupo de seguridad para las instancias backend.\nresource \"aws_security_group\" \"backend\" {\n  name        = var.SG_BACKEND\n  description = \"SG Backend\"\n}\n\n# Configuramos reglas de entrada para el backend, permitiendo \u00fanicamente acceso a SSH (22) y MySQL (3306) desde cualquier IP.\nresource \"aws_security_group_rule\" \"backend_ingress\" {\n  count             = 2\n  security_group_id = aws_security_group.backend.id\n  type              = \"ingress\"\n  from_port         = [22, 3306][count.index]\n  to_port           = [22, 3306][count.index]\n  protocol          = \"tcp\"\n  cidr_blocks       = [\"0.0.0.0/0\"]\n}\n\n# Definimos el grupo de seguridad para el loadbalancer de carga.\nresource \"aws_security_group\" \"loadbalancer\" {\n  name        = var.SG_LOADBALANCER\n  description = \"SG LoadBalancer\"\n}\n\n# Permitimos tr\u00e1fico en los puertos esenciales (SSH, MySQL, HTTP, HTTPS y NFS) en el loadbalancer.\nresource \"aws_security_group_rule\" \"loadbalancer_ingress\" {\n  count             = 5\n  security_group_id = aws_security_group.loadbalancer.id\n  type              = \"ingress\"\n  from_port         = [22, 3306, 80, 443, 2049][count.index]\n  to_port           = [22, 3306, 80, 443, 2049][count.index]\n  protocol          = \"tcp\"\n  cidr_blocks       = [\"0.0.0.0/0\"]\n}\n\n# Definimos el grupo de seguridad para el servidor NFS.\nresource \"aws_security_group\" \"nfs\" {\n  name        = var.SG_NFS\n  description = \"SG NFS\"\n}\n\n# Permitimos tr\u00e1fico en los puertos SSH (22) y NFS (2049) desde cualquier IP.\nresource \"aws_security_group_rule\" \"nfs_ingress\" {\n  count             = 2\n  security_group_id = aws_security_group.nfs.id\n  type              = \"ingress\"\n  from_port         = [22, 2049][count.index]\n  to_port           = [22, 2049][count.index]\n  protocol          = \"tcp\"\n  cidr_blocks       = [\"0.0.0.0/0\"]\n}\n\n# Creamos dos instancias EC2 para el frontend con las configuraciones definidas.\nresource \"aws_instance\" \"frontend\" {\n  count           = 2\n  ami             = var.ami_id\n  instance_type   = var.instance_type\n  key_name        = var.key_name\n  security_groups = [aws_security_group.frontend.name]\n\n  tags = {\n    Name = \"frontend-${count.index + 1}\"\n  }\n}\n\n# Creamos una instancia EC2 para el backend.\nresource \"aws_instance\" \"backend\" {\n  ami             = var.ami_id\n  instance_type   = var.instance_type\n  key_name        = var.key_name\n  security_groups = [aws_security_group.backend.name]\n\n  tags = {\n    Name = \"backend\"\n  }\n}\n\n# Creamos una instancia EC2 para el loadbalancer de carga.\nresource \"aws_instance\" \"loadbalancer\" {\n  ami             = var.ami_id\n  instance_type   = var.instance_type\n  key_name        = var.key_name\n  security_groups = [aws_security_group.loadbalancer.name]\n\n  tags = {\n    Name = \"loadbalancer\"\n  }\n}\n\n# Creamos una instancia EC2 para el servidor NFS.\nresource \"aws_instance\" \"nfs\" {\n  ami             = var.ami_id\n  instance_type   = var.instance_type\n  key_name        = var.key_name\n  security_groups = [aws_security_group.nfs.name]\n\n  tags = {\n    Name = \"nfs\"\n  }\n}\n\n# Asignamos una IP el\u00e1stica a cada una de las dos instancias frontend.\nresource \"aws_eip\" \"frontend\" {\n  count    = 2\n  instance = aws_instance.frontend[count.index].id\n}\n\n# Asignamos una IP el\u00e1stica a la instancia backend.\nresource \"aws_eip\" \"backend\" {\n  instance = aws_instance.backend.id\n}\n\n# Asignamos una IP el\u00e1stica a la instancia loadbalancer.\nresource \"aws_eip\" \"loadbalancer\" {\n  instance = aws_instance.loadbalancer.id\n}\n\n# Asignamos una IP el\u00e1stica a la instancia NFS.\nresource \"aws_eip\" \"nfs\" {\n  instance = aws_instance.nfs.id\n}\n</code></pre> <p>Archivo \"output.tf\" (Informaci\u00f3n relevante comentada en el c\u00f3digo)\"</p> <pre><code># Salida de las IPs p\u00fablicas de las instancias frontend\noutput \"frontend_elastic_ips\" {\n  value = [for i in aws_eip.frontend : i.public_ip]\n}\n\n# Salida de la IP p\u00fablica de la instancia backend\noutput \"backend_elastic_ip\" {\n  value = aws_eip.backend.public_ip\n}\n\n# Salida de la IP p\u00fablica de la instancia del balanceador de carga\noutput \"balanceador_elastic_ip\" {\n  value = aws_eip.loadbalancer.public_ip\n}\n\n# Salida de la IP p\u00fablica de la instancia NFS\noutput \"nfs_elastic_ip\" {\n  value = aws_eip.nfs.public_ip\n}\n</code></pre> <p>Archivo \"variables.tf\" (he dejado lo tuyo y he a\u00f1adido los grupos de seguridad)\"</p> <pre><code>variable \"region\" {\n  description = \"Regi\u00f3n de AWS donde se crear\u00e1 la instancia\"\n  type        = string\n  default     = \"us-east-1\"\n}\n\nvariable \"allowed_ingress_ports\" {\n  description = \"Puertos de entrada del grupo de seguridad\"\n  type        = list(number)\n  default     = [22, 80, 443]\n}\n\nvariable \"sg_name\" {\n  description = \"Nombre del grupo de seguridad\"\n  type        = string\n  default     = \"sg_ejemplo_06\"\n}\n\nvariable \"sg_description\" {\n  description = \"Descripci\u00f3n del grupo de seguridad\"\n  type        = string\n  default     = \"Grupo de seguridad para la instancia de ejemplo 06\"\n}\n\nvariable \"ami_id\" {\n  description = \"Identificador de la AMI\"\n  type        = string\n  default     = \"ami-00874d747dde814fa\"\n}\n\nvariable \"instance_type\" {\n  description = \"Tipo de instancia\"\n  type        = string\n  default     = \"t2.small\"\n}\n\nvariable \"key_name\" {\n  description = \"Nombre de la clave p\u00fablica\"\n  type        = string\n  default     = \"vockey\"\n}\n\nvariable \"instance_name\" {\n  description = \"Nombre de la instancia\"\n  type        = string\n  default     = \"instancia_ejemplo_06\"\n}\n\n# Variable que define el nombre del SG para el frontend\nvariable \"SG_FRONTEND\" {\n  description = \"Nombre del SG del frontend\"\n  type        = string\n  default     = \"sg_frontend\"\n}\n\n# Variable que define el nombre del SG para el backend\nvariable \"SG_BACKEND\" {\n  description = \"Nombre del SG del backend\"\n  type        = string\n  default     = \"sg_backend\"\n}\n\n# Variable que define el nombre del SG para el LoadBalancer\nvariable \"SG_LOADBALANCER\" {\n  description = \"Nombre del SG del LoadBalancer\"\n  type        = string\n  default     = \"sg_loadbalancer\"\n}\n\n# Variable que define el nombre del SG para el servidor NFS\nvariable \"SG_NFS\" {\n  description = \"Nombre del SG del NFS Server\"\n  type        = string\n  default     = \"sg_nfs\"\n}\n</code></pre> <p>COMPROBACIONES - Salida de ejecuci\u00f3n de terraform  - Creaci\u00f3n de instancias  - Creaci\u00f3n de Grupos de Seguridad  - Creaci\u00f3n de IPs El\u00e1sticas  - Grupos de seguridad asociados a instancias </p>"}]}